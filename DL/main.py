# -*- coding: utf-8 -*-
"""BipedDQN

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RaYrA4rg9MyggIYkn5mBRr0kLXQDGfLd
"""

import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from collections import namedtuple
from collections import deque
import random

import pybullet as p
import pybullet_data


EPISODES = 3500

EPS = 1.0
EPS_DECAY = 0.995
EPS_MIN = 0.01

GAMMA = 0.8
LEARNING_RATE = 0.01
BATCH_SIZE = 64

class DQN(nn.Module):
  def __init__(self, state_size, action_size):
    super(DQN,self).__init__()

    self.fc1 = nn.Linear(state_size, 64)
    self.fc2 = nn.Linear(64,64)
    self.fc3 = nn.Linear(64,action_size)

  def forward(self, x):
    x = torch.relu(self.fc1(x))
    x = torch.relu(self.fc2(x))
    x = torch.relu(self.fc3(x))

    return x



class ReplayMemory:
  def __init__(self,capacity):
    self.memory = deque(maxlen=capacity)

    pass

  def push(self,transition):
    self.memory.append(transition)
    pass

  def sample(self,batch_size):
    return random.sample(self.memory, batch_size)

  def __len__(self):
    return len(self.memory)

class Agent(nn.Module,ReplayMemory,DQN):
    def __init__(self,state_size,action_size):
      super(DQN, self).__init__()
      self.state_size = state_size
      self.action_size = action_size

      self.model = DQN(state_size, action_size)
      self.target_model = DQN(state_size, action_size)

      self.target_model.load_state_dict(self.model.state_dict)

      self.optimizer = optim.Adam(self.model.parameters(), lr=LEARNING_RATE)

    def act(self, state):
      '''
      implement epsilon-greedy
      '''
      if np.random.rand() <= EPS:
          return random.randrange(self.action_size)
      state = torch.FloatTensor(state).unsqueeze(0)
      with torch.no_grad():
          q_values = self.model(state)
      return np.argmax(q_values.cpu().numpy())

    def train(self, batch_size):
        if len(self.memory) < batch_size:
            return
        
        minibatch = self.memory.sample(batch_size)

        states = torch.FloatTensor(t[0] for t in minibatch)
        action = torch.FloatTensor(t[1] for t in minibatch)
        reward = torch.FloatTensor(t[2] for t in minibatch)
        next_state = torch.FloatTensor(t[3] for t in minibatch)
        dones = torch.FloatTensor(t[4] for t in minibatch)

        q_values = self.model(states).gather(1,action).squeeze(1)
        next_q_values = self.model(next_state).gather(1, action).max(1)[0]
        targets = reward + (GAMMA * next_q_values * (1 - dones))

        loss = nn.MSELoss()(q_values, targets)
        self.optimizer.zero_grad()
        loss.backward()
        self.optimizer.step()

        if EPS > EPS_MIN:
            EPS *= EPS_DECAY

    def getReward(body_pos:tuple,body_velocity:tuple,joint:namedtuple):
         '''
         calculate reward due to the state of actuator.
         '''
         
         return reward
  

class Bot:
  def __init__(self,botID,filename):
    self.botID = botID

    p.connect(p.GUI)
    p.setGravity(0, 0, -9.81)
    p.setAdditionalSearchPath(pybullet_data.getDataPath())
    plane_id = p.loadURDF("plane.urdf")
    robot_id = p.loadURDF(filename, basePosition=[0, 0, 1])

    pass

  def getJointState(self):
    num_joints = p.getNumJoints(self.botID)

    Joints = []

    JointState = namedtuple('JointState',['angle', 'velocity'])

    for joint_idx in range(num_joints):
      angle = p.getJointState[0]
      velocity = p.getJointState[1]

      Joints.append(JointState(angle=angle,velocity=velocity))
    
    return Joints


  def getBodyState(self):
    position, orientation = p.getBasePositionAndOrientation(self.botID)
    linear_velocity, angular_velocity = p.getBaseVelocity(self.botID)
    BodyState = namedtuple('BodyState',['position','angle','linear_velocity','angular_velocity'])

    Body = BodyState(position=position,angle=orientation,linear_velocity=linear_velocity,angular_velocity=angular_velocity)
  

    return Body
  
  def step(self,action):
     return
    


state_size = 
action_size = 

agent = Agent(state_size, action_size)
bot = Bot('...')

for e in range(EPISODES):
    # state = env.reset()

    state = np.reshape(state, [1, state_size])
    total_reward = 0
    done = False

    while not done:
        bodyState = bot.getBodyState()
        jointState = bot.getJointState()
        state = (*bodyState,*jointState)

        action = agent.act(state)

        #observations required
        #관절 각속도 및 각
        #몸체 각속도 및 각
        #접촉력 - 보류
        #이전 action 피드백

        next_state, reward, done = bot.step(action)
        next_state = np.reshape(next_state, [1, state_size])

        #보상함수
        reward = agent.getReward(state)

        agent.memory.push((state, action, reward, next_state, done))
        state = next_state
        total_reward += reward

        if done:
            agent.update_target_model()
            print(f"Episode: {e+1}/{EPISODES}, Score: {total_reward}")
            break

        agent.train(BATCH_SIZE)